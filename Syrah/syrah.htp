#if !defined(_syrah_)
#  define _syrah_

class model_data : public ad_comm{
  int debug;
  int catEscError;
  int contCatchType;
  data_number version;
  data_int year;
  data_int NDISTRICTS;
  data_int NGROUPS;
  data_int NSTOCKS;
  data_int NAGECOMPS;
  data_vector AgeCompLabels;
  data_vector GENdata;
  data_matrix GeneticFracData;
  data_matrix AgeCompCATCH;
  data_matrix AgeCompESC;
  data_vector catchData;
  data_vector escData;
  data_int NSELECTPAR;
  data_matrix TempSelectivity;
  data_int NAVAILPAR;
  data_matrix TempAvailability;
  data_matrix TempRunSize;
  data_matrix groupCodes;
  data_number temp_sigmaCat;
  data_number temp_sigmaEsc;
  data_int testCode;
  dvector lbRun;
  dvector lbAvail;
  dvector lbSel;
  dvector ubRun;
  dvector ubAvail;
  dvector ubSel;
  ivector phzRun;
  ivector phzAvail;
  ivector phzSel;
  dvector startRun;
  dvector startAvail;
  dvector startSel;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value negLogLike;
  param_init_bounded_number_vector RunSize;
  param_init_bounded_number_vector Availability;
  param_init_bounded_number_vector Selectivity;
  param_vector SelectivityGroup;
  param_matrix AvailabilityGroup;
  param_matrix catchByGroup;
  param_vector escByGroup;
  param_number sigmaCat;
  param_number sigmaEsc;
  param_number NLLagecompCatch;
  param_number NLLagecompEsc;
  param_number NLLescape;
  param_number NLLcatch;
  param_number NLLgenetics;
  param_number NLLselOne;
  param_number NLLavailOne;
  param_number NLLextra;
  param_vector catchTotal_pred;
  param_vector escTotal_pred;
  param_matrix catchAgeComp_pred;
  param_matrix escAgeComp_pred;
  param_vector catchByStock;
  param_matrix catchGenComp_pred;
  param_vector Fmort;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void InitializeVariables(void);
  void RunModel(void);
  void CalcAgeComp(void);
  void CalcGeneticComp(void);
  void CalcLikelihoods(void);

};
#endif
